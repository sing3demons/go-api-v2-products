definitions:
  controllers.authForm:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - name
    - password
    type: object
  controllers.authResponse:
    properties:
      email:
        type: string
      name:
        type: string
    type: object
  controllers.categoryForm:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  controllers.categoryPaging:
    properties:
      items:
        items:
          $ref: '#/definitions/controllers.categoryResponse'
        type: array
      paging:
        $ref: '#/definitions/controllers.pagingResult'
    type: object
  controllers.categoryResponse:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  controllers.createUserForm:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - name
    - password
    type: object
  controllers.pagingResult:
    properties:
      count:
        type: integer
      limit:
        type: integer
      nextPage:
        type: integer
      page:
        type: integer
      prevPage:
        type: integer
      totalPage:
        type: integer
    type: object
  controllers.productResponse:
    properties:
      category:
        properties:
          id:
            type: integer
          name:
            type: string
        type: object
      categoryId:
        type: integer
      desc:
        type: string
      id:
        type: integer
      image:
        type: string
      name:
        type: string
      price:
        type: integer
    required:
    - categoryId
    type: object
  controllers.productsPaging:
    properties:
      items:
        items:
          $ref: '#/definitions/controllers.productResponse'
        type: array
      paging:
        $ref: '#/definitions/controllers.pagingResult'
    type: object
  controllers.userResponse:
    properties:
      avatar:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      role:
        type: string
    type: object
  middleware.formLogin:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
info:
  contact: {}
  title: Swagger GO-PRODUCT API
  version: "1.0"
paths:
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      parameters:
      - description: login
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/middleware.formLogin'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      tags:
      - auth
  /api/v1/auth/profile:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.authResponse'
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      tags:
      - auth
  /api/v1/auth/profile/{id}:
    patch:
      consumes:
      - application/json
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      - description: avatar
        in: formData
        name: avatar
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.userResponse'
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      tags:
      - auth
    put:
      consumes:
      - application/json
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      - description: name
        in: formData
        name: name
        required: true
        type: string
      - description: email
        in: formData
        name: email
        required: true
        type: string
      - description: avatar
        in: formData
        name: avatar
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.userResponse'
        "422":
          description: Unprocessable Entity
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      tags:
      - auth
  /api/v1/auth/register:
    post:
      consumes:
      - application/json
      parameters:
      - description: register
        in: body
        name: register
        required: true
        schema:
          $ref: '#/definitions/controllers.authForm'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controllers.authResponse'
        "422":
          description: Unprocessable Entity
          schema:
            additionalProperties: true
            type: object
      tags:
      - auth
  /api/v1/categories:
    get:
      consumes:
      - application/json
      description: get all categories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.categoryPaging'
      summary: show an categories
      tags:
      - categories
    post:
      consumes:
      - application/json
      description: add by json category
      parameters:
      - description: form
        in: body
        name: form
        required: true
        schema:
          $ref: '#/definitions/controllers.categoryForm'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controllers.categoryResponse'
        "422":
          description: '{"error": "unprocessable entity"}'
          schema:
            additionalProperties: true
            type: object
      summary: add an category
      tags:
      - categories
  /api/v1/categories/{id}:
    delete:
      consumes:
      - application/json
      description: delete by json category
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "success"}'
          schema:
            type: string
        "404":
          description: '{"error": "not found"}'
          schema:
            additionalProperties: true
            type: object
        "422":
          description: Bad Request
          schema:
            type: string
      summary: delete an category
      tags:
      - categories
    get:
      consumes:
      - application/json
      description: get string by ID
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.categoryPaging'
        "404":
          description: '{"error": "record not found"}'
          schema:
            additionalProperties: true
            type: object
      summary: show an category
      tags:
      - categories
    put:
      consumes:
      - application/json
      description: update by json category
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      - description: form
        in: body
        name: form
        required: true
        schema:
          $ref: '#/definitions/controllers.categoryForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.categoryResponse'
        "404":
          description: '{"error": "not found"}'
          schema:
            additionalProperties: true
            type: object
        "422":
          description: Bad Request
          schema:
            type: string
      summary: update an category
      tags:
      - categories
  /api/v1/products:
    get:
      consumes:
      - application/json
      parameters:
      - description: page
        in: query
        name: page
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.productsPaging'
      summary: Show an products
      tags:
      - products
    post:
      consumes:
      - multipart/form-data
      description: add by form product
      parameters:
      - description: name
        in: formData
        name: name
        required: true
        type: string
      - description: desc
        in: formData
        name: desc
        required: true
        type: string
      - description: price
        in: formData
        name: price
        required: true
        type: integer
      - description: image
        in: formData
        name: image
        required: true
        type: file
      - description: categoryId
        in: formData
        name: categoryId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.productResponse'
      security:
      - BearerAuth: []
      summary: add an product
      tags:
      - products
  /api/v1/products/{id}:
    delete:
      consumes:
      - application/json
      description: delete by json product
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.productResponse'
        "404":
          description: '{"error": "not found"}'
          schema:
            additionalProperties: true
            type: object
        "422":
          description: Bad Request
          schema:
            type: string
      summary: delete an product
      tags:
      - products
    get:
      consumes:
      - application/json
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.productResponse'
      summary: FindOne - /:id
      tags:
      - products
    put:
      consumes:
      - multipart/form-data
      description: update by form product
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: name
        in: formData
        name: name
        type: string
      - description: desc
        in: formData
        name: desc
        type: string
      - description: price
        in: formData
        name: price
        type: integer
      - description: image
        in: formData
        name: image
        type: file
      - description: categoryId
        in: formData
        name: categoryId
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.productResponse'
      security:
      - BearerAuth: []
      summary: update an products
      tags:
      - products
  /api/v1/users:
    get:
      consumes:
      - application/json
      description: get users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/controllers.userResponse'
            type: array
        "403":
          description: '{"error": "Forbidden"}'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: '{"error": "not found"}'
          schema:
            additionalProperties: true
            type: object
        "422":
          description: '{"error": "Bad Request"}'
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: List users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: add user by form User
      parameters:
      - description: register
        in: body
        name: register
        required: true
        schema:
          $ref: '#/definitions/controllers.createUserForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.userResponse'
        "404":
          description: '{"error": "not found"}'
          schema:
            additionalProperties: true
            type: object
        "422":
          description: '{"error": "Bad Request"}'
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: add an users
      tags:
      - users
  /api/v1/users/{id}:
    delete:
      consumes:
      - application/json
      description: update user by form User
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: ""
        "404":
          description: '{"error": "not found"}'
          schema:
            additionalProperties: true
            type: object
        "422":
          description: '{"error": "Bad Request"}'
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: update an users
      tags:
      - users
    get:
      consumes:
      - application/json
      description: get user by id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.userResponse'
        "404":
          description: '{"error": "not found"}'
          schema:
            additionalProperties: true
            type: object
        "422":
          description: '{"error": "Bad Request"}'
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Show an users
      tags:
      - users
    put:
      consumes:
      - application/json
      description: update user by form User
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      - description: name
        in: formData
        name: name
        required: true
        type: string
      - description: email
        in: formData
        name: email
        type: string
      - description: avatar
        in: formData
        name: avatar
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.userResponse'
        "404":
          description: '{"error": "not found"}'
          schema:
            additionalProperties: true
            type: object
        "422":
          description: '{"error": "Bad Request"}'
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: update an users
      tags:
      - users
  /api/v1/users/{id}/demote:
    patch:
      consumes:
      - application/json
      description: Admin mode
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: ""
        "404":
          description: '{"error": "not found"}'
          schema:
            additionalProperties: true
            type: object
        "422":
          description: '{"error": "Bad Request"}'
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: update an users
      tags:
      - users
  /api/v1/users/{id}/promote:
    patch:
      consumes:
      - application/json
      description: Admin mode
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: ""
        "404":
          description: '{"error": "not found"}'
          schema:
            additionalProperties: true
            type: object
        "422":
          description: '{"error": "Bad Request"}'
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: update an users
      tags:
      - users
  /healthz:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: ""
  /x:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
schemes:
- https
- http
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
